
Buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000677  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057d  00000000  00000000  00000877  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b9  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000310  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010c  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define LED_PORT PORTC
#define LED_DDR DDRC
#define BUZZER_PIN PD1

int main() {
	LED_DDR |= (1 << PC0) | (1 << PC1) | (1 << PC2);
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	87 60       	ori	r24, 0x07	; 7
  70:	84 bb       	out	0x14, r24	; 20

	DDRD |= (1 << BUZZER_PIN);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	82 60       	ori	r24, 0x02	; 2
  76:	81 bb       	out	0x11, r24	; 17

	while (1) {
		int i;
		
		for (i = 0; i < 3; i++) {
  78:	20 e0       	ldi	r18, 0x00	; 0
  7a:	30 e0       	ldi	r19, 0x00	; 0
  7c:	1b c0       	rjmp	.+54     	; 0xb4 <main+0x48>
		
			LED_PORT |= (1 << i);
  7e:	45 b3       	in	r20, 0x15	; 21
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	02 2e       	mov	r0, r18
  86:	02 c0       	rjmp	.+4      	; 0x8c <main+0x20>
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	0a 94       	dec	r0
  8e:	e2 f7       	brpl	.-8      	; 0x88 <main+0x1c>
  90:	94 2f       	mov	r25, r20
  92:	98 2b       	or	r25, r24
  94:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	4f e9       	ldi	r20, 0x9F	; 159
  98:	56 e8       	ldi	r21, 0x86	; 134
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	41 50       	subi	r20, 0x01	; 1
  9e:	50 40       	sbci	r21, 0x00	; 0
  a0:	60 40       	sbci	r22, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x30>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x3a>
  a6:	00 00       	nop
			_delay_ms(500); 
			
			LED_PORT &= ~(1 << i);
  a8:	95 b3       	in	r25, 0x15	; 21
  aa:	80 95       	com	r24
  ac:	89 23       	and	r24, r25
  ae:	85 bb       	out	0x15, r24	; 21
	DDRD |= (1 << BUZZER_PIN);

	while (1) {
		int i;
		
		for (i = 0; i < 3; i++) {
  b0:	2f 5f       	subi	r18, 0xFF	; 255
  b2:	3f 4f       	sbci	r19, 0xFF	; 255
  b4:	23 30       	cpi	r18, 0x03	; 3
  b6:	31 05       	cpc	r19, r1
  b8:	14 f3       	brlt	.-60     	; 0x7e <main+0x12>
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	1b c0       	rjmp	.+54     	; 0xf6 <main+0x8a>
			LED_PORT &= ~(1 << i);
		}
		
		for (i = 1; i >= 0; i--) {
		
			LED_PORT |= (1 << i);
  c0:	45 b3       	in	r20, 0x15	; 21
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 2e       	mov	r0, r18
  c8:	02 c0       	rjmp	.+4      	; 0xce <main+0x62>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	0a 94       	dec	r0
  d0:	e2 f7       	brpl	.-8      	; 0xca <main+0x5e>
  d2:	94 2f       	mov	r25, r20
  d4:	98 2b       	or	r25, r24
  d6:	95 bb       	out	0x15, r25	; 21
  d8:	4f e9       	ldi	r20, 0x9F	; 159
  da:	56 e8       	ldi	r21, 0x86	; 134
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	41 50       	subi	r20, 0x01	; 1
  e0:	50 40       	sbci	r21, 0x00	; 0
  e2:	60 40       	sbci	r22, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x72>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x7c>
  e8:	00 00       	nop
			_delay_ms(500); 
			LED_PORT &= ~(1 << i);
  ea:	95 b3       	in	r25, 0x15	; 21
  ec:	80 95       	com	r24
  ee:	89 23       	and	r24, r25
  f0:	85 bb       	out	0x15, r24	; 21
			_delay_ms(500); 
			
			LED_PORT &= ~(1 << i);
		}
		
		for (i = 1; i >= 0; i--) {
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	31 09       	sbc	r19, r1
  f6:	33 23       	and	r19, r19
  f8:	1c f7       	brge	.-58     	; 0xc0 <main+0x54>
			_delay_ms(500); 
			LED_PORT &= ~(1 << i);
		}

		
		PORTD |= (1 << BUZZER_PIN);
  fa:	82 b3       	in	r24, 0x12	; 18
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	82 bb       	out	0x12, r24	; 18
 100:	8f e3       	ldi	r24, 0x3F	; 63
 102:	9d e0       	ldi	r25, 0x0D	; 13
 104:	23 e0       	ldi	r18, 0x03	; 3
 106:	81 50       	subi	r24, 0x01	; 1
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	20 40       	sbci	r18, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x9a>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0xa4>
 110:	00 00       	nop
		_delay_ms(1000); 
		PORTD &= ~(1 << BUZZER_PIN);
 112:	82 b3       	in	r24, 0x12	; 18
 114:	8d 7f       	andi	r24, 0xFD	; 253
 116:	82 bb       	out	0x12, r24	; 18
	}
 118:	af cf       	rjmp	.-162    	; 0x78 <main+0xc>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
