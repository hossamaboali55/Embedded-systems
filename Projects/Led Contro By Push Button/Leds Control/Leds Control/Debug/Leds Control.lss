
Leds Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000056e  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f9  00000000  00000000  000006ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001df  00000000  00000000  00000be3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e4  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4c 00 	jmp	0x98	; 0x98 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>

int main(void)
{
	// Configure port C pins as inputs
	DDRB = 0x00;
  6c:	17 ba       	out	0x17, r1	; 23

	// Configure port C pins as outputs
	DDRC=0xff;
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	84 bb       	out	0x14, r24	; 20

	while (1)
	{
		// Check if button 1 is pressed 
		if (PINB & (1 << 0))
  72:	b0 9b       	sbis	0x16, 0	; 22
  74:	04 c0       	rjmp	.+8      	; 0x7e <main+0x12>
		{
			// Turn on LED 1
			PORTC |= (1 << 0);
  76:	85 b3       	in	r24, 0x15	; 21
  78:	81 60       	ori	r24, 0x01	; 1
  7a:	85 bb       	out	0x15, r24	; 21
  7c:	03 c0       	rjmp	.+6      	; 0x84 <main+0x18>
		}
		else
		{
			// Turn off LED 1
			PORTC &= ~(1 << 0);
  7e:	85 b3       	in	r24, 0x15	; 21
  80:	8e 7f       	andi	r24, 0xFE	; 254
  82:	85 bb       	out	0x15, r24	; 21
		}

		// Check if button 2 is pressed (active low)
		if (PINB & (1 << 1))
  84:	b1 9b       	sbis	0x16, 1	; 22
  86:	04 c0       	rjmp	.+8      	; 0x90 <main+0x24>
		{
			// Turn on LED 2
			PORTC |= (1 << 1);
  88:	85 b3       	in	r24, 0x15	; 21
  8a:	82 60       	ori	r24, 0x02	; 2
  8c:	85 bb       	out	0x15, r24	; 21
  8e:	f1 cf       	rjmp	.-30     	; 0x72 <main+0x6>
		}
		else
		{
			// Turn off LED 2
			PORTC &= ~(1 <<1);
  90:	85 b3       	in	r24, 0x15	; 21
  92:	8d 7f       	andi	r24, 0xFD	; 253
  94:	85 bb       	out	0x15, r24	; 21
  96:	ed cf       	rjmp	.-38     	; 0x72 <main+0x6>

00000098 <_exit>:
  98:	f8 94       	cli

0000009a <__stop_program>:
  9a:	ff cf       	rjmp	.-2      	; 0x9a <__stop_program>
